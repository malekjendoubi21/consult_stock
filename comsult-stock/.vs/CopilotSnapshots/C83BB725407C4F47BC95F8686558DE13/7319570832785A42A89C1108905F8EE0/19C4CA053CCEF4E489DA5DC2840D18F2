using comsult_stock.DTOs;
using comsult_stock.Models;
using consult_stock.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace consult_stock.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize] // Admin only access
    public class VentesController : ControllerBase
    {
        private readonly VenteService _venteService;
        private readonly StockService _stockService;

        public VentesController(VenteService venteService, StockService stockService)
        {
            _venteService = venteService;
            _stockService = stockService;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var ventes = await _venteService.GetAllAsync();
            return Ok(ventes);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var vente = await _venteService.GetByIdAsync(id);
            if (vente == null) return NotFound();
            return Ok(vente);
        }

        [HttpGet("societe/{societeId}")]
        public async Task<IActionResult> GetBySocieteId(int societeId)
        {
            var ventes = await _venteService.GetBySocieteIdAsync(societeId);
            return Ok(ventes);
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] CreateVenteDto dto)
        {
            try
            {
                var vente = new Vente
                {
                    SocieteId = dto.SocieteId,
                    Article = dto.Article,
                    Lot = dto.Lot,
                    QteVendu = dto.QteVendu,
                    Date = dto.Date
                };

                var created = await _venteService.CreateAsync(vente);
                return CreatedAtAction(nameof(GetById), new { id = created.Id }, created);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] UpdateVenteDto dto)
        {
            try
            {
                var vente = new Vente
                {
                    SocieteId = dto.SocieteId,
                    Article = dto.Article,
                    Lot = dto.Lot,
                    QteVendu = dto.QteVendu,
                    Date = dto.Date
                };

                var updated = await _venteService.UpdateAsync(id, vente);
                if (updated == null) return NotFound();
                return Ok(updated);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var deleted = await _venteService.DeleteAsync(id);
            if (!deleted) return NotFound();
            return NoContent();
        }

        [HttpPost("article")]
        [AllowAnonymous] // Allow vendeurs to make sales
        public async Task<IActionResult> VendreArticle([FromBody] VenteArticleDto dto)
        {
            try
            {
                // Rechercher l'article dans le stock
                var stocks = await _stockService.GetBySocieteIdAsync(dto.SocieteId);
                var stock = stocks.FirstOrDefault(s => 
                    s.CodeBarre == dto.CodeArticle && 
                    s.NumLot == dto.NumLot);

                if (stock == null)
                    return BadRequest(new { message = "Article non trouvé dans le stock." });

                if (stock.QteDispo < dto.Quantite)
                    return BadRequest(new { message = "Quantité insuffisante en stock." });

                // Créer la vente
                var vente = new Vente
                {
                    SocieteId = dto.SocieteId,
                    Article = dto.CodeArticle,
                    Lot = dto.NumLot,
                    QteVendu = dto.Quantite,
                    Date = DateTime.Now
                };

                var venteCreated = await _venteService.CreateAsync(vente);

                // Mettre à jour le stock
                var stockUpdate = new Stock
                {
                    SocieteId = stock.SocieteId,
                    CodeBarre = stock.CodeBarre,
                    NumLot = stock.NumLot,
                    QteDispo = stock.QteDispo - dto.Quantite,
                    PrixTTC = stock.PrixTTC,
                    DateExpiration = stock.DateExpiration
                };

                await _stockService.UpdateAsync(stock.Id, stockUpdate);

                // Créer le ticket si demandé
                string? codeBarre = null;
                if (dto.ImprimerTicket)
                {
                    var ticketService = HttpContext.RequestServices.GetRequiredService<TicketService>();
                    codeBarre = ticketService.GenerateBarcode();
                    await ticketService.CreateTicketAsync(codeBarre, venteCreated.Id);
                }

                return Ok(new { 
                    vente = venteCreated,
                    ticket = dto.ImprimerTicket ? new { codeBarre } : null,
                    message = "Vente effectuée avec succès."
                });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }
    }
}
