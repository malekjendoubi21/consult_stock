using comsult_stock.DTOs;
using comsult_stock.Models;
using consult_stock.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace consult_stock.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize] // Admin only access
    public class SocietesController : ControllerBase
    {
        private readonly SocieteService _societeService;

        public SocietesController(SocieteService societeService)
        {
            _societeService = societeService;
        }

        [HttpGet]
        [AllowAnonymous] // Allow vendeurs to see societes list
        public async Task<IActionResult> GetAll()
        {
            var societes = await _societeService.GetAllAsync();
            return Ok(societes);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var societe = await _societeService.GetByIdAsync(id);
            if (societe == null) return NotFound();
            return Ok(societe);
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] CreateSocieteDto dto)
        {
            var societe = new Societe
            {
                Nom = dto.Nom,
                Adresse = dto.Adresse
            };

            var created = await _societeService.CreateAsync(societe);
            return CreatedAtAction(nameof(GetById), new { id = created.Id }, created);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] UpdateSocieteDto dto)
        {
            var societe = new Societe
            {
                Nom = dto.Nom,
                Adresse = dto.Adresse
            };

            var updated = await _societeService.UpdateAsync(id, societe);
            if (updated == null) return NotFound();
            return Ok(updated);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var deleted = await _societeService.DeleteAsync(id);
            if (!deleted) return NotFound();
            return NoContent();
        }
    }
}
