using comsult_stock.DTOs;
using comsult_stock.Models;
using consult_stock.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace consult_stock.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ArticlesController : ControllerBase
    {
        private readonly ArticleService _articleService;

        public ArticlesController(ArticleService articleService)
        {
            _articleService = articleService;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var articles = await _articleService.GetAllAsync();
            return Ok(articles);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var article = await _articleService.GetByIdAsync(id);
            if (article == null) return NotFound();
            return Ok(article);
        }

        [HttpGet("search")]
        public async Task<IActionResult> Search([FromQuery] string term = "")
        {
            if (string.IsNullOrWhiteSpace(term))
            {
                var allArticles = await _articleService.GetAllAsync();
                return Ok(allArticles);
            }

            var articles = await _articleService.SearchAsync(term);
            return Ok(articles);
        }

        [HttpGet("code/{code}")]
        public async Task<IActionResult> GetByCode(string code)
        {
            var article = await _articleService.GetByCodeAsync(code);
            if (article == null) return NotFound();
            return Ok(article);
        }

        [HttpGet("societe/{societeId}")]
        public async Task<IActionResult> GetBySocieteId(int societeId)
        {
            var articles = await _articleService.GetBySocieteIdAsync(societeId);
            return Ok(articles);
        }

        [Authorize] // Admin only
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] CreateArticleDto dto)
        {
            try
            {
                var article = new Article
                {
                    Nom = dto.Nom,
                    CodeArticle = dto.CodeArticle,
                    PrixTTC = dto.PrixTTC,
                    PrixHT = dto.PrixHT
                };

                var created = await _articleService.CreateAsync(article);
                return CreatedAtAction(nameof(GetById), new { id = created.Id }, created);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [Authorize] // Admin only
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] UpdateArticleDto dto)
        {
            try
            {
                var article = new Article
                {
                    Nom = dto.Nom,
                    CodeArticle = dto.CodeArticle,
                    PrixTTC = dto.PrixTTC,
                    PrixHT = dto.PrixHT
                };

                var updated = await _articleService.UpdateAsync(id, article);
                if (updated == null) return NotFound();
                return Ok(updated);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [Authorize] // Admin only
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var deleted = await _articleService.DeleteAsync(id);
            if (!deleted) return NotFound();
            return NoContent();
        }
    }
}
